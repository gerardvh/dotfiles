#!/usr/bin/env ruby

require 'rubygems'
require 'thor'

# Thor class for making aem do things on my machine.
#
##### LEGACY USES DOCKER #######
# Now doing this directly for compatability
#
# class Aem < Thor
#   desc 'start', "Starts up AEM author and publish containers with name 'aem'."
#   long_desc <<DESC
# Example usage: `aem start -v 6_3 -i both` starts version 6_3 with both an
# author and a publish instance.
# DESC
#   method_option :version, aliases: '-v', default: '6_3'
#   method_option :instance, aliases: '-i', default: 'both'
#   def start
#     puts 'Starting up aem containers...'
#     `docker-compose \
#         --file ~/.dotfiles/docker/local-aem.yml --project-name "aem" up -d`
#   end

#   desc 'stop', 'Stops running containers for author and publish.'
#   def stop
#     puts 'Stopping aem containers...'
#     `docker-compose \
#         --file ~/.dotfiles/docker/local-aem.yml --project-name "aem" down`
#   end

#   desc 'logs INSTANCE', 'View the tail of a log for a particular INSTANCE.'
#   def logs(instance)
#     puts 'Hello from logs'
#     puts "Instance: #{instance}"
#   end
# end

class Aem < Thor
  desc 'start', "Starts AEM author and/or publish instances"
  method_option :instance,
                aliases: '-i',
                enum: ['publish', 'author', 'both'],
                default: 'both'
  def start
    if options[:instance] == 'both'
      start_impl 'author'
      start_impl 'publish'
    else
      start_impl options[:instance]
    end
  end

  desc 'stop', "Stop one or both running AEM instances"
  method_option :instance,
                aliases: '-i',
                enum: ['publish', 'author', 'both'],
                default: 'both'
  def stop
    if options[:instance] == 'both'
      stop_impl 'author'
      stop_impl 'publish'
    else
      stop_impl options[:instance]
    end
  end

  desc 'logs', "Tail the logs for author or publish running instance"
  method_option :instance,
                aliases: '-i',
                enum: ['publish', 'author'],
                default: 'author'
  def logs
    logs_impl options[:instance]
  end

  no_commands do
    def start_impl(instance)
      puts "starting... #{instance}"
      # TODO: this is very specific and subject to change in location
      `/Volumes/OCZ/AEM/6-3/#{instance}/crx-quickstart/bin/start`
    end

    def stop_impl(instance)
      puts "stopping... #{instance}"
      # TODO: this is very specific and subject to change in location
      `/Volumes/OCZ/AEM/6-3/#{instance}/crx-quickstart/bin/stop`
    end

    def logs_impl(instance)
      puts "logging.... #{instance}"
      # TODO: this is very specific and subject to change in location
      # Also TODO: doesn't work, maybe because it's in a sub shell or something?
      # no output when running
      `tail -f /Volumes/OCZ/AEM/6-3/#{instance}/crx-quickstart/logs/error.log`
    end
  end
end

Aem.start
